"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _useCallbackRef2 = _interopRequireDefault(require("@restart/hooks/useCallbackRef"));

var _useEventCallback = _interopRequireDefault(require("@restart/hooks/useEventCallback"));

var React = _interopRequireWildcard(require("react"));

var _Modal = _interopRequireDefault(require("react-overlays/Modal"));

var _ModalManager = _interopRequireDefault(require("react-overlays/ModalManager"));

var _useRootClose = _interopRequireDefault(require("react-overlays/useRootClose"));

var _OffcanvasBody = _interopRequireDefault(require("./OffcanvasBody"));

var _OffcanvasToggling = _interopRequireDefault(require("./OffcanvasToggling"));

var _ModalContext = _interopRequireDefault(require("./ModalContext"));

var _OffcanvasHeader = _interopRequireDefault(require("./OffcanvasHeader"));

var _OffcanvasTitle = _interopRequireDefault(require("./OffcanvasTitle"));

var _ThemeProvider = require("./ThemeProvider");

var _jsxRuntime = require("react/jsx-runtime");

var defaultProps = {
  show: false,
  backdrop: true,
  keyboard: true,
  scroll: false,
  autoFocus: true,
  enforceFocus: true,
  restoreFocus: true,
  placement: 'start'
};

function DialogTransition(props) {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_OffcanvasToggling.default, (0, _extends2.default)({}, props));
}

var Offcanvas = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix,
      className = _ref.className,
      children = _ref.children,
      ariaLabelledby = _ref['aria-labelledby'],
      placement = _ref.placement,
      show = _ref.show,
      backdrop = _ref.backdrop,
      keyboard = _ref.keyboard,
      scroll = _ref.scroll,
      onEscapeKeyDown = _ref.onEscapeKeyDown,
      onShow = _ref.onShow,
      onHide = _ref.onHide,
      container = _ref.container,
      autoFocus = _ref.autoFocus,
      enforceFocus = _ref.enforceFocus,
      restoreFocus = _ref.restoreFocus,
      restoreFocusOptions = _ref.restoreFocusOptions,
      onEntered = _ref.onEntered,
      onExit = _ref.onExit,
      onExiting = _ref.onExiting,
      onEnter = _ref.onEnter,
      onEntering = _ref.onEntering,
      onExited = _ref.onExited,
      backdropClassName = _ref.backdropClassName,
      propsManager = _ref.manager,
      props = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["bsPrefix", "className", "children", "aria-labelledby", "placement", "show", "backdrop", "keyboard", "scroll", "onEscapeKeyDown", "onShow", "onHide", "container", "autoFocus", "enforceFocus", "restoreFocus", "restoreFocusOptions", "onEntered", "onExit", "onExiting", "onEnter", "onEntering", "onExited", "backdropClassName", "manager"]);

  var _useCallbackRef = (0, _useCallbackRef2.default)(),
      dialogElement = _useCallbackRef[0],
      setDialogElement = _useCallbackRef[1];

  var modalManager = (0, React.useRef)();
  var handleHide = (0, _useEventCallback.default)(onHide);
  bsPrefix = (0, _ThemeProvider.useBootstrapPrefix)(bsPrefix, 'offcanvas'); // If there's a backdrop, let BaseModal handle closing.

  (0, _useRootClose.default)(dialogElement, handleHide, {
    disabled: backdrop
  });
  var modalContext = (0, React.useMemo)(function () {
    return {
      onHide: handleHide
    };
  }, [handleHide]);

  function getModalManager() {
    if (propsManager) return propsManager;
    if (!modalManager.current) modalManager.current = new _ModalManager.default({
      handleContainerOverflow: !scroll
    });
    return modalManager.current;
  }

  var handleEnter = function handleEnter(node) {
    if (node) node.style.visibility = 'visible';

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    onEnter == null ? void 0 : onEnter.apply(void 0, [node].concat(args));
    setDialogElement(node);
  };

  var handleExited = function handleExited(node) {
    if (node) node.style.visibility = '';

    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    onExited == null ? void 0 : onExited.apply(void 0, args);
    setDialogElement(null);
  };

  var renderBackdrop = (0, React.useCallback)(function (backdropProps) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", (0, _extends2.default)({}, backdropProps, {
      className: (0, _classnames.default)(bsPrefix + "-backdrop", backdropClassName)
    }));
  }, [backdropClassName, bsPrefix]);

  var renderDialog = function renderDialog(dialogProps) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", (0, _extends2.default)({
      role: "dialog"
    }, dialogProps, props, {
      className: (0, _classnames.default)(className, bsPrefix, bsPrefix + "-" + placement),
      "aria-labelledby": ariaLabelledby,
      children: children
    }));
  };

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ModalContext.default.Provider, {
    value: modalContext,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Modal.default, {
      show: show,
      ref: ref,
      backdrop: backdrop,
      container: container,
      keyboard: keyboard,
      autoFocus: autoFocus,
      enforceFocus: enforceFocus,
      restoreFocus: restoreFocus,
      restoreFocusOptions: restoreFocusOptions,
      onEscapeKeyDown: onEscapeKeyDown,
      onShow: onShow,
      onHide: onHide,
      onEnter: handleEnter,
      onEntering: onEntering,
      onEntered: onEntered,
      onExit: onExit,
      onExiting: onExiting,
      onExited: handleExited,
      manager: getModalManager(),
      containerClassName: bsPrefix + "-open",
      transition: DialogTransition,
      renderBackdrop: renderBackdrop,
      renderDialog: renderDialog
    })
  });
});
Offcanvas.displayName = 'Offcanvas';
Offcanvas.defaultProps = defaultProps;

var _default = Object.assign(Offcanvas, {
  Body: _OffcanvasBody.default,
  Header: _OffcanvasHeader.default,
  Title: _OffcanvasTitle.default
});

exports.default = _default;
module.exports = exports.default;