import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";

var _transitionStyles;

import classNames from 'classnames';
import * as React from 'react';
import { ENTERED, ENTERING, EXITING } from 'react-transition-group/Transition';
import transitionEndListener from './transitionEndListener';
import TransitionWrapper from './TransitionWrapper';
import { useBootstrapPrefix } from './ThemeProvider';
import { jsx as _jsx } from "react/jsx-runtime";
var defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false
};
var transitionStyles = (_transitionStyles = {}, _transitionStyles[ENTERING] = 'show', _transitionStyles[ENTERED] = 'show', _transitionStyles);
var OffcanvasToggling = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix,
      className = _ref.className,
      _children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "children"]);

  bsPrefix = useBootstrapPrefix(bsPrefix, 'offcanvas');
  return /*#__PURE__*/_jsx(TransitionWrapper, _extends({
    ref: ref,
    addEndListener: transitionEndListener
  }, props, {
    childRef: _children.ref,
    children: function children(status, innerProps) {
      return /*#__PURE__*/React.cloneElement(_children, _extends({}, innerProps, {
        className: classNames(className, _children.props.className, (status === ENTERING || status === EXITING) && bsPrefix + "-toggling", transitionStyles[status])
      }));
    }
  }));
});
OffcanvasToggling.defaultProps = defaultProps;
OffcanvasToggling.displayName = 'OffcanvasToggling';
export default OffcanvasToggling;