import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import classNames from 'classnames';
import useCallbackRef from '@restart/hooks/useCallbackRef';
import useEventCallback from '@restart/hooks/useEventCallback';
import * as React from 'react';
import { useCallback, useMemo, useRef } from 'react';
import BaseModal from 'react-overlays/Modal';
import ModalManager from 'react-overlays/ModalManager';
import useRootClose from 'react-overlays/useRootClose';
import OffcanvasBody from './OffcanvasBody';
import OffcanvasToggling from './OffcanvasToggling';
import ModalContext from './ModalContext';
import OffcanvasHeader from './OffcanvasHeader';
import OffcanvasTitle from './OffcanvasTitle';
import { useBootstrapPrefix } from './ThemeProvider';
import { jsx as _jsx } from "react/jsx-runtime";
var defaultProps = {
  show: false,
  backdrop: true,
  keyboard: true,
  scroll: false,
  autoFocus: true,
  enforceFocus: true,
  restoreFocus: true,
  placement: 'start'
};

function DialogTransition(props) {
  return /*#__PURE__*/_jsx(OffcanvasToggling, _extends({}, props));
}

var Offcanvas = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix,
      className = _ref.className,
      children = _ref.children,
      ariaLabelledby = _ref['aria-labelledby'],
      placement = _ref.placement,
      show = _ref.show,
      backdrop = _ref.backdrop,
      keyboard = _ref.keyboard,
      scroll = _ref.scroll,
      onEscapeKeyDown = _ref.onEscapeKeyDown,
      onShow = _ref.onShow,
      onHide = _ref.onHide,
      container = _ref.container,
      autoFocus = _ref.autoFocus,
      enforceFocus = _ref.enforceFocus,
      restoreFocus = _ref.restoreFocus,
      restoreFocusOptions = _ref.restoreFocusOptions,
      onEntered = _ref.onEntered,
      onExit = _ref.onExit,
      onExiting = _ref.onExiting,
      onEnter = _ref.onEnter,
      onEntering = _ref.onEntering,
      onExited = _ref.onExited,
      backdropClassName = _ref.backdropClassName,
      propsManager = _ref.manager,
      props = _objectWithoutPropertiesLoose(_ref, ["bsPrefix", "className", "children", "aria-labelledby", "placement", "show", "backdrop", "keyboard", "scroll", "onEscapeKeyDown", "onShow", "onHide", "container", "autoFocus", "enforceFocus", "restoreFocus", "restoreFocusOptions", "onEntered", "onExit", "onExiting", "onEnter", "onEntering", "onExited", "backdropClassName", "manager"]);

  var _useCallbackRef = useCallbackRef(),
      dialogElement = _useCallbackRef[0],
      setDialogElement = _useCallbackRef[1];

  var modalManager = useRef();
  var handleHide = useEventCallback(onHide);
  bsPrefix = useBootstrapPrefix(bsPrefix, 'offcanvas'); // If there's a backdrop, let BaseModal handle closing.

  useRootClose(dialogElement, handleHide, {
    disabled: backdrop
  });
  var modalContext = useMemo(function () {
    return {
      onHide: handleHide
    };
  }, [handleHide]);

  function getModalManager() {
    if (propsManager) return propsManager;
    if (!modalManager.current) modalManager.current = new ModalManager({
      handleContainerOverflow: !scroll
    });
    return modalManager.current;
  }

  var handleEnter = function handleEnter(node) {
    if (node) node.style.visibility = 'visible';

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    onEnter == null ? void 0 : onEnter.apply(void 0, [node].concat(args));
    setDialogElement(node);
  };

  var handleExited = function handleExited(node) {
    if (node) node.style.visibility = '';

    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    onExited == null ? void 0 : onExited.apply(void 0, args);
    setDialogElement(null);
  };

  var renderBackdrop = useCallback(function (backdropProps) {
    return /*#__PURE__*/_jsx("div", _extends({}, backdropProps, {
      className: classNames(bsPrefix + "-backdrop", backdropClassName)
    }));
  }, [backdropClassName, bsPrefix]);

  var renderDialog = function renderDialog(dialogProps) {
    return /*#__PURE__*/_jsx("div", _extends({
      role: "dialog"
    }, dialogProps, props, {
      className: classNames(className, bsPrefix, bsPrefix + "-" + placement),
      "aria-labelledby": ariaLabelledby,
      children: children
    }));
  };

  return /*#__PURE__*/_jsx(ModalContext.Provider, {
    value: modalContext,
    children: /*#__PURE__*/_jsx(BaseModal, {
      show: show,
      ref: ref,
      backdrop: backdrop,
      container: container,
      keyboard: keyboard,
      autoFocus: autoFocus,
      enforceFocus: enforceFocus,
      restoreFocus: restoreFocus,
      restoreFocusOptions: restoreFocusOptions,
      onEscapeKeyDown: onEscapeKeyDown,
      onShow: onShow,
      onHide: onHide,
      onEnter: handleEnter,
      onEntering: onEntering,
      onEntered: onEntered,
      onExit: onExit,
      onExiting: onExiting,
      onExited: handleExited,
      manager: getModalManager(),
      containerClassName: bsPrefix + "-open",
      transition: DialogTransition,
      renderBackdrop: renderBackdrop,
      renderDialog: renderDialog
    })
  });
});
Offcanvas.displayName = 'Offcanvas';
Offcanvas.defaultProps = defaultProps;
export default Object.assign(Offcanvas, {
  Body: OffcanvasBody,
  Header: OffcanvasHeader,
  Title: OffcanvasTitle
});